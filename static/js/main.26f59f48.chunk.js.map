{"version":3,"sources":["components/Navbar/Navbar.js","components/Wrapper/Wrapper.js","components/Footer/Footer.js","components/Container/Container.js","components/Character/Character.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","firstTurn","repeat","score","topScore","Wrapper","Object","assign","Footer","Container","concat","fluid","Character","alt","src","data-id","id","onClick","handleClick","App","state","dogs","clicked","displayDogs","_this","map","dog","i","components_Character_Character","key","image","shuffleDogs","temp","randomIndex","array","slice","currentIndex","length","Math","floor","random","event","target","dataset","checkClickedDogs","updateState","newState","setState","handleGameOver","winner","setTimeout","repeatClick","includes","newClicked","toConsumableArray","shuffledDogs","this","Fragment","components_Navbar_Navbar","components_Wrapper_Wrapper","components_Container_Container","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26f59f48.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div>\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                    <a className=\"navbar-brand\" href=\"#\">Clicky Game</a>\n                </li>\n                <li className=\"nav-item\">\n                    {\n                        props.firstTurn ? `Click an image to begin!` : \n                            props.repeat === false ? `You guessed correctly!` : \n                                `You guessed incorrectly!`\n                    }\n                </li>\n                <li className=\"nav-item\">\n                    Score: <span>{props.score}</span> | Top Score: <span>{props.topScore}</span>\n                </li>\n            </ul>\n        </div>\n    </nav>\n);\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <main className=\"wrapper\" {...props} />;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <span>Clicky Game</span>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\n\nconst Container = props =>\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n\nexport default Container;\n","import React from \"react\";\nimport \"./Character.css\"\n\nconst Character = props => (\n  <img alt=\"Character\" src={props.src} data-id={props.id}  onClick={props.handleClick} />\n);\n\nexport default Character;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Wrapper from './components/Wrapper';\nimport Footer from './components/Footer';\nimport Container from './components/Container';\nimport dogs from './dogs.json';\nimport Character from './components/Character';\n\nclass App extends Component {\n  state = {\n    dogs: [],\n    clicked: [],\n    repeat: false,\n    score: 0,\n    topScore: 0,\n    firstTurn: true\n  }\n\n  componentDidMount() {\n    this.setState({ dogs: dogs });\n  }\n\n  displayDogs = () => {\n    return this.state.dogs.map((dog, i) =>\n      <Character\n        key={i}\n        src={dog.image}\n        id={dog.id}\n        handleClick={this.handleClick}\n      />)\n  }\n\n  // https://bost.ocks.org/mike/shuffle/\n  shuffleDogs = () => {\n    let array = dogs.slice();\n    let currentIndex = array.length;\n    let temp;\n    let randomIndex;\n    // While there remain elements to shuffle…\n    while (currentIndex > 0) {\n      // Pick a remaining element…\n      randomIndex = Math.floor(Math.random() * currentIndex--);\n      // And swap it with the current element.\n      temp = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temp;\n    }\n\n    return array;\n  }\n\n  handleClick = event => {\n    let id = event.target.dataset.id;\n\n    this.checkClickedDogs(id)\n\n    this.displayDogs();\n  }\n\n  updateState = newState => {\n    this.setState(newState);\n  }\n\n  handleGameOver = (winner, score) => {\n    this.updateState({repeat: !winner});\n\n    setTimeout(() => {\n      this.updateState({\n        dogs: dogs,\n        clicked: [],\n        repeat: false,\n        score: 0,\n        topScore: score > this.state.topScore ? score : this.state.topScore\n      });\n    }, 1000);\n    \n  }\n\n  checkClickedDogs = id => {\n    let repeatClick = this.state.clicked.includes(id) ? true : false\n    let newClicked = [...this.state.clicked, id];\n    let shuffledDogs = this.shuffleDogs();\n    let score = repeatClick ? this.state.score : this.state.score + 1;\n    let newState = {\n      dogs: shuffledDogs,\n      clicked: newClicked,\n      repeat: repeatClick,\n      score: score,\n      firstTurn: false\n    };\n\n    if (repeatClick || this.state.score === 12) {\n      this.handleGameOver(!repeatClick, score);\n    } else {\n      this.updateState(newState);\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar firstTurn={this.state.firstTurn} repeat={this.state.repeat} score={this.state.score} topScore={this.state.topScore} />\n        <Wrapper>\n          <Container>\n            {this.displayDogs()}\n          </Container>\n        </Wrapper>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}