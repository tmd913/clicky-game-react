{"version":3,"sources":["components/Navbar/Navbar.js","components/Wrapper/Wrapper.js","components/Footer/Footer.js","components/Container/Container.js","components/Character/Character.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","firstTurn","repeat","winner","score","topScore","Wrapper","Object","assign","children","Footer","target","Container","concat","fluid","Character","alt","src","data-id","id","onClick","handleClick","shake","App","state","dogs","clicked","displayDogs","_this","map","dog","i","components_Character_Character","key","image","shuffleDogs","temp","randomIndex","array","slice","currentIndex","length","Math","floor","random","event","dataset","checkClickedDogs","updateState","newState","setState","handleGameOver","setTimeout","repeatClick","includes","newClicked","toConsumableArray","shuffledDogs","this","components_Navbar_Navbar","components_Wrapper_Wrapper","components_Container_Container","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3be24c92.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n  <nav className=\"navbar navbar-light\">\n    <div>\n      <ul className=\"navbar-nav text-center\">\n        <div className=\"row\">\n          <div className=\"col-sm-4\">\n            <li className=\"nav-item\">\n              <a className=\"navbar-brand\" href=\"/\">\n                Clicky Game\n              </a>\n            </li>\n          </div>\n          <div className=\"col-sm-4\">\n            <li className=\"nav-item nav-text\">\n              {props.firstTurn\n                ? `Click an image to begin!`\n                : props.repeat === true\n                ? `You guessed incorrectly!`\n                : props.winner \n                ? `You win!`\n                : `You guessed correctly!`}\n            </li>\n          </div>\n          <div className=\"col-sm-4\">\n            <li className=\"nav-item nav-text\">\n              Score: <span>{props.score}</span> | Top Score:{\" \"}\n              <span>{props.topScore}</span>\n            </li>\n          </div>\n        </div>\n      </ul>\n    </div>\n  </nav>\n);\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <main className=\"wrapper\" {...props}>{props.children}</main>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n  <footer className=\"footer text-center\">\n    <a href=\"https://github.com/tmd913/clicky-game-react\" target=\"_blank\">Github</a>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport \"./Container.css\";\n\nconst Container = props => (\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props}>{props.children}</div>\n)\n\nexport default Container;\n","import React from \"react\";\nimport \"./Character.css\";\n\nconst Character = props => (\n  <img alt=\"Character\" src={props.src} data-id={props.id}  onClick={props.handleClick} className={props.shake ? \"shake\" : (props.winner ? \"winner\" : \"still\")} />\n);\n\nexport default Character;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Wrapper from './components/Wrapper';\nimport Footer from './components/Footer';\nimport Container from './components/Container';\nimport dogs from './dogs.json';\nimport Character from './components/Character';\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    dogs: [],\n    clicked: [],\n    repeat: false,\n    score: 0,\n    topScore: 0,\n    firstTurn: true,\n    shake: false,\n    winner: false\n  }\n\n  componentDidMount() {\n    this.setState({ dogs: dogs });\n  }\n\n  // generate character component for each dog\n  displayDogs = () => {\n    return this.state.dogs.map((dog, i) =>\n      <Character\n        key={i}\n        src={dog.image}\n        id={dog.id}\n        handleClick={this.handleClick}\n        shake={this.state.shake}\n        winner={this.state.winner}\n      />)\n  }\n\n  // https://bost.ocks.org/mike/shuffle/\n  shuffleDogs = () => {\n    let array = dogs.slice();\n    let currentIndex = array.length;\n    let temp;\n    let randomIndex;\n    // While there remain elements to shuffle…\n    while (currentIndex > 0) {\n      // Pick a remaining element…\n      randomIndex = Math.floor(Math.random() * currentIndex--);\n      // And swap it with the current element.\n      temp = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temp;\n    }\n\n    return array;\n  }\n\n  handleClick = event => {\n    let id = event.target.dataset.id;\n\n    this.checkClickedDogs(id)\n\n    this.displayDogs();\n  }\n\n  updateState = newState => {\n    this.setState(newState);\n  }\n\n  handleGameOver = (winner, score) => {\n    this.updateState({repeat: !winner, shake: !winner, winner: winner});\n\n    // slight delay before new game\n    setTimeout(() => {\n      this.updateState({\n        dogs: dogs,\n        clicked: [],\n        repeat: false,\n        score: 0,\n        topScore: score > this.state.topScore ? score : this.state.topScore,\n        firstTurn: true,\n        shake: false,\n        winner: false\n      });\n    }, 1000);\n    \n  }\n\n  // check if dog has been clicked previously\n  checkClickedDogs = id => {\n    // check clicked dogs for most recently clicked dog\n    let repeatClick = this.state.clicked.includes(id) ? true : false\n    // add most recently clicked dog to clicked array\n    let newClicked = [...this.state.clicked, id];\n    let shuffledDogs = this.shuffleDogs();\n    // increment score if dog was not previously clicked\n    let score = repeatClick ? this.state.score : this.state.score + 1;\n    // create obj which represents new state\n    let newState = {\n      dogs: shuffledDogs,\n      clicked: newClicked,\n      repeat: repeatClick,\n      score: score,\n      firstTurn: false\n    };\n\n    // check if game is over, win or lose\n    if (repeatClick || score === 3) {\n      this.handleGameOver(!repeatClick, score);\n    } else {\n      this.updateState(newState);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"divBody\">\n        <Navbar firstTurn={this.state.firstTurn} repeat={this.state.repeat} score={this.state.score} topScore={this.state.topScore} winner={this.state.winner} />\n        <Wrapper>\n          <Container>\n            {this.displayDogs()}\n          </Container>\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}